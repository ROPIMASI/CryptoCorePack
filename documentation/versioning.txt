# PRESENTATION: "versioning.txt" (v4)
This document is the official CryptoCorePack Project's versioning documentation. This includes the project's versioning method and history, in witch, lines are added by the project's author only, based on the needs of the project itself, its backlog (and/or to-do-list.txt), its objectives and goals, and mainly its development implementation progress.  
  
On a team project, is very important to know and to follow the project's versioning specifications. Although at the moment CryptoCorePack's status is under early development because it has not yet released its first stable version (1.0.0-stable), and it is being developed privately (without community cooperation), it already had been designed under SemVer (Semantic Versioning Specification). Maybe it will become a team's project (or open source) in the future.  
  
Thus, CryptoCorePack uses SemVer for its versioning. SemVer is a specification (set of rules) that tells (or dictates) us how to use the numbers (and some letters) on the versioning-expression. More specifically, CriptoCorePack uses a composed of five parts versioning-expression, such as Major.Minor.Patch-PreReleaseStatus+Build (in short form M.m.p-r+b). Even it seems to be too long, who getting involved with the project can notice that it is not, since the numbers and words used on versioning-expression are small and, most importantly, the last two flags (PreReleaseStatus and Build) are optional, that is, its usage is encouraged in some cases where is needed to difference in detail.  
  
  
  
##### A preliminary note
Namely: CryptoCorePack is monitored under the project-template "Automated Kanban with reviews" on GitHub, and managed under influence of "SCRUM", therefore the project has "backlog" and, the project's development time-line is also guided by "Gitflow", so it has some branches such as "master", "develop", "release", "feature/xyz", "bugfix", "hotfix". See more about the GitHub Kanban panel of the [CryptoCorePack's project in its own page](https://github.com/users/ROPIMASI/projects/9), and see more about its [branches and time-line evolution in its own repository](https://github.com/ROPIMASI/CryptoCorePack). For a better reading know the table of [acronyms and abbreviations](https://github.com/ROPIMASI/CryptoCorePack/tree/master/documentation/acronyms-abbreviations.txt).
  
  
  
### The CryptoCorePack's versioning guidelines:

#### Project's main assets version
Describe the version of the main assets of the project (com.ropimasi.cryptocorepack package). For that it's used the versioning-expression. Its parts works as follow:
+ Major
  - It represents the main version, a number that changes when the project has its whole list of predefined requirements and intended for this version in the backlog developed;
    - The whole list of predefined requirements intended for a specific version is called as "version-backlog", in other words "M.m.p-backlog", more realistic examples: 1.0.0-backlog, or 2.0.0-backlog, or partial in releases 0.3.0-backlog, or 0.1.0-backlog;
  - This part, Major, starts with value 0 (zero) meaning that the whole predefined requirements list for the first stable version (1.0.0) have not yet been accomplished, e.g. 0.1.0, or 0.2.0, 0.5.2, etc.;
  - Versioning system of this project also complies with SemVer's specifications regarding interface changes, if any interface undergoes modifications in its form of use, Major-Version must change;
  - Once the major version is accomplished and/or its number added 1, all other smaller parts of versioning-expression must be reset to its initial value;
    - E.g. 1.0.0 becomes 2.0.0, or, 1.5.1 becomes 2.0.0, or, 32.19.5 becomes 33.0.0, and so on.  
  - It is filled with positive integer number only: from 0 to 99 or more, who knows...  
+ Minor
  - It represents a set of changes on the project's progress that are smaller than the main one, less impactful, it's a number that changes when, may be just one feature/requirement from the Main-backlog (M.0.0-backlog, e.g. 4.0.0-backlog) or, a set of them (witch can be deploy-able) are implemented;
  - This part starts with value 0 (zero), meaning that "NO" predefined requirements for that specific Major-version (M.0.0) have been developed, yet;
  - Once a minor-version goal is accomplished (developed, done to be merged/released) and its number added 1, all other smaller parts of versioning-expression must be reset to its initial value;
    - E.g. 1.1.0 becomes 1.2.0, or, 1.5.1 becomes 1.6.0, or, 32.19.5 becomes 32.20.0, and so on.
  - It is filled with positive integer number only: from 0 to 99 or more, who knows...  
+ Patch
  - It represents a single change regardless of its size, a particular kind of change, the nature of that change is a bug-fix. Perhaps a bug-fix affects one single feature, sometimes affects more than one. In short "patch" is a number that changes along with a bug-fix merged/released to CryptoCorePack project's development time-line (Gitflow). 
  - This part starts with the value 0 (zero), meaning that there were no bugs to fix yet, for example 0.1.0, or 0.2.0, or 4.11.0, etc.;
  - Once a patch-version is developed (done to be merged/released) and its number added 1, no other part of versioning-expression changes its values;
    - E.g. 1.1.0 becomes 1.1.1, or, 1.5.1 becomes 1.5.2 or, 32.19.5 becomes 32.19.6, and so on.
  - It is filled with positive integer number only: from 0 to 99 or more, who knows...
+ PreReleaseStatus
  - It represents the situation in which the development process of that version is;
  - The standard flags of PreReleaseStatus for the versioning-expression are as follows:
    - dev: in early development, not encouraged usage;
    - alpha: in development, first test phase, encouraged usage for test only at self own risk;
    - beta: release version, however only for test, usage is a choose at self own risk;
    - stable: stable tested release version; bugs are possible to appear, so would come back to a hot-fix-branch if needed.  
+ Build
  - Under analyzes and elaboration... 
  - Lorem ipsum foo bar baz qux...  
  
#### Project's elements version (optional under analyzes and elaboration...) 
Describe the version of some project's elements. Elements are small parts witch make up the project's main asset, such as, records(JDK14's feature in preview), methods, classes, maybe further others. It is composed of one number preceded by 'v' character, e.g.: 'vElement', in short form 'vE', or in realistic way v0, or v1, or v5, or v32, and so on;  
+ Element
  - It represents the sequential number of times there were any change on the element's code(source, file, etc), whatever how impactful it was;
  - This part starts with the value 0 (zero), meaning that it is the first implementation, that is, there were "NO" changes on the first implementation of the element, yet;
  - Once any change happens in the element, its number is added 1;
    - E.g. v0 becomes v1, or, v1 becomes v2, or, v5 becomes v6, or v32 becomes v33, and so on;
  - It is filled with positive integer number only: from 0 to 99 or more, who knows...
  
  
  
# WARNING !
### THIS DOCUMENT HAS ITS OWN RULES, WHICH MUST BE FOLLOWED SERIOUSLY !
(Because, maybe, this file will be read and interpreted by a software in the future.)  
  
  
  
### INSTRUCTIONS:
+ Inputs in this document must be done as a queue (FIFO: First In First Out Data Structure);
  - Write newlines in the above part of the table below (block of data) staying up the most recent line (see and follow date column).  
+ All columns must be filled with its related data;  
+ Any character must NOT be changed;
  - Keep unchanged presentation, warning, instructions, etc sections;
  - Keep unchanged table-title, column's top, column's bottom.  
+ VERSION column must be only filled with the SemVer standards values, according above explanation;  
+ DATE column must be only filled with the standard yyyymmdd date format:
  - Example: day 31, month January, year 2020;
    . In some countries written like that: 31/01/2020;
    . In some countries written like that: 01/31/2020;
    . Viewed like that: day day / month month / year year year year;
    . Must be write like that: year year year year / month month / day day;
    . Must be concatenated like that: yearyearyearyearmonthmonthdayday;
    . Usually contracted form like that: yyyymmdd.  
+ EACH COLUMN must obey/respect its length, as marked at column's top, e.g. 8, 16, 80, 112:
  - At the top and bottom of column is possible to see that from first to last character of each column are represented by dash "-", and so on, but there are some pipe "|" characters spread being a especial character as columns limiter;
  - Inside each columns data are separated by ";" character at the end of the words, and rest of column filled with " " space character until the end of column.  
  
  
  
### HISTORYCAL TABLE:
DATE    |VERSION |PRE-RELEASE |BUILD       |NOTE  
-8------|-8------|-12---------|-12---------|-88-------------------------------------------------------------------------------------|  
                                                                                                                                    
Newlines will be added here...  
20200511;0.1.0;   -dev;        +20200511    Docs improved. Development symmHybrid_v1() started.  
20200509;0.1.0;   -dev;        +20200509    Symm auxil funcs integrates CryptoCorePack class. Docs has its first full-version.
20200423;0.1.0;   -dev;        +20200323    Lorem ipsum foo bar baz qux...; // Sample line.  
20200322;0.1.0;   -alpha;      +20200322    Lorem ipsum foo bar baz qux...; // Sample line.  
20191121;0.1.0;   -dev;        +20191121    Lorem ipsum foo bar baz qux...; // Sample line.  
                                                                                                                                    
-8------|-8------|-12---------|-12---------|-88-------------------------------------------------------------------------------------|  
  
  
  
######EOF.ROPIMASI.  